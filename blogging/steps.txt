Step 1 – Install Node.js
Step 2 – Install Express Generator
    C:\node>npm install -g express-generator //-g lives in your master NPM installation directory
Step 3 – Create an Express Project
    C:\node>express --view="ejs" nodetest1
    change directory:
     $ cd notetest
   install dependencies:
     $ npm install
   run the app:
     $ DEBUG=notetest:* npm star
Step 4 – Edit Dependencies
    C:\node\nodetest1>npm install --save monk@7.1.2 mongodb@3.5.4
Step 5 – Install Dependencies
    C:\node\nodetest1>npm install
Part 2 – OK, Fine, let's do "Hello, World!"    
    add to the file \routes\index.js
    /* GET Hello World page. */
    router.get('/helloworld', function(req, res) {
      res.render('helloworld', { title: 'Hello, World!' });
    });
    
    actual page for res.render to … render That's where EJS comes in
    open index.ejs & save it as helloworld.ejs
    <p>Hello, World! Welcome to <%= title %></p> //modify the file
    npm start
Part 3 – Create our DB and read stuff from it
Step 1 – Install MongoDB
    pointing it to http://mongodb.com/
    mkdir -p /data/db
Step 2 – Run mongo
    mongo
Step 3 – Create a Database
    use nodetest //Mongo Console
Step 4 – Add some Data
    db.usercollection.insert({ "username" : "testuser1", "email" : "testuser1@testdomain.com" })
    db.usercollection.find().pretty()
    newstuff = [{ "username" : "testuser2", "email" : "testuser2@testdomain.com" },
                { "username" : "testuser3", "email" : "testuser3@testdomain.com" }]
    db.usercollection.insert(newstuff);
Step 5 – Hook Mongo up to Node
    // New Code ,to talk to MongoDB
    var monk = require('monk');
    var db = monk('localhost:27017/nodetest1');
    // Make our db accessible to our router
    app.use(function(req,res,next){
      req.db = db;
      next();
    });
    we're adding that Monk to every HTTP request (ie: req) our app makes.
Step 6 – Pull your data from Mongo and display it
    /* GET Userlist page. Add userlist route*/
    // we passed to our http request, and then using that db connection to fill our docs variable with database documents
    router.get('/userlist', function(req, res) {
        var db = req.db;
        var collection = db.get('usercollection');
        collection.find({},{},function(e,docs){
            res.render('userlist', {
                "userlist" : docs
            });
        });
    }); 
    //open index.ejs. save it as userlist.ejs
    <!DOCTYPE html>
    <html>
      <head>
        <title>User List</title>
        <link rel='stylesheet' href='/stylesheets/style.css' />
      </head>
      <body>
        <h1>User List</h1>
        <ul>
          <%
            var list = '';
            for (i = 0; i < userlist.length; i++) {
              list += '<li><a href="mailto:' + userlist[i].email + '">' + userlist[i].username + '</a></li>';
            }
          %>
          <%- list %>
        </ul>
      </body>
    </html>
 Part 4 Step 1 – Create your data input
    file route/index.js
      /* GET New User page. */
      router.get('/newuser', function(req, res){
        res.render('newuser', { title: 'New User'})
      })
    Open up /views/index.ejs, save it as newuser.ejs
    <!DOCTYPE html>
    <html>
      <head>
        <title>Add User</title>
        <link rel='stylesheet' href='/stylesheets/style.css' />
      </head>
      <body>
        <h1><%= title %></h1>
        <form id="formAddUser" name="adduser" method="post" action="/adduser">
          <input id="inputUserName" type="text" placeholder="username" name="username" />
          <input id="inputUserEmail" type="text" placeholder="email" name="useremail" />
          <button id="btnSubmit" type="submit">Submit</button>
        </form>
      </body>
    </html>
Part 4 Step 2 – Create your DB functions
    add into route/index.js a route for POSTing to /adduser 
      /* POST to Add User Service */
      router.post('/adduser', function(req, res){
        const db = req.db
        const userName = req.body.username
        const userEmail = req.body.useremail
        const collection = db.get('usercollection')
        
        collection.insert({
          "username": userName, "useremail": userEmail},
          function(err, doc) {
            if( err ){
              res.send("There was a problem adding the information to the database.")
            } else {
              res.redirect("userlist")
            }
        })
      })
Part 4 Step 3 – Connect and add data to your DB
    Add a few users to check the form

    
